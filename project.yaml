project: allium
version: 1.0
sharepoint: /Clients/Projects/HSF/Sunflower/01_Data
users: /Users/stephen/Yellow Canary/Yellow Canary - Documents

raw:
  payslips: {include: ["payslip","cohort 1"], exclude: ["sample","sunflower"]}
  timesheets: {include: ["to","cohort 1"], exclude: ["sample","sunflower","locations","payslips"]}

staging:
  payslips: [
             {staging: 'EmployeeCode',         raw: 'IdNumber',                  type: 'object',         tests: [],                      plugin: {}}
            ,{staging: 'PayslipCode',          raw: 'create_PayslipCode',         type: 'object',         tests: [],                      plugin: {name: 'PayslipCode', ref: [], switch: True}}
            ,{staging: 'PaysliplineCode',      raw: 'create_PaysliplineCode',     type: 'object',         tests: [],                      plugin: {name: 'PaysliplineCode', ref: ['EmployeeCode', 'PeriodEndDate'], switch: True}}
            ,{staging: 'PeriodStartDate',      raw: 'create_PeriodStartDate',     type: 'datetime64[ns]', tests: ['date'],                plugin: {name: 'PeriodStartDate', ref: ['PayFrequency', 'PeriodEndDate'], switch: True}}
            ,{staging: 'PeriodEndDate',        raw: 'PeriodEndingDate',         type: 'datetime64[ns]', tests: ['date'],                plugin: {}}
            ,{staging: 'PayFrequency',         raw: 'PayFrequency',              type: 'object',         tests: [],                      plugin: {}}
            ,{staging: 'Paycode',              raw: 'HoursorADCodeDesc',     type: 'object',         tests: ['inscope'],             plugin: {}}
            ,{staging: 'Hours',                raw: 'NumberOfUnits',            type: 'float64',        tests: ['numeric'],             plugin: {}}
            ,{staging: 'Amount',               raw: 'Value',                      type: 'float64',        tests: ['numeric'],             plugin: {}}
            ,{staging: 'EmployeeType',         raw: 'EmploymentTypeCodeDesc',  type: 'object',         tests: ['inscope'],             plugin: {}}
            ,{staging: 'EmployeeClassication', raw: 'JobTitleCodeDescription', type: 'object',         tests: ['inscope'],             plugin: {}}
            ,{staging: 'DateOfBirth',          raw: 'DateOfBirth',              type: 'datetime64[ns]', tests: ['date'],                plugin: {}}
            ,{staging: 'BaseHours',            raw: 'BaseHours',                 type: 'float64',        tests: ['numeric','positive'],  plugin: {}}
            ,{staging: 'Site',                 raw: 'AccountCodeDescription',   type: 'object',         tests: [],                      plugin: {}}
            ,{staging: 'Source',               raw: 'source',                     type: 'object',         tests: [],                      plugin: {}}
            ]

  timesheets: [
             {staging: 'EmployeeCode',         raw: 'ExportCode',                type: 'object',         tests: [],                      plugin: {}}
            ,{staging: 'Award',                raw: 'create_award',               type: 'object',         tests: ['inscope'],             plugin: {name: 'Award', ref: [], switch: True}}
            ,{staging: 'Date',                 raw: 'Date',                       type: 'datetime64[ns]', tests: ['date'],                plugin: {}}
            ,{staging: 'ClockedIn',            raw: 'PayStart',                  type: 'datetime64[ns]', tests: ['date'],                plugin: {}}
            ,{staging: 'ClockedOut',           raw: 'PayEnd',                    type: 'datetime64[ns]', tests: ['date'],                plugin: {}}
            ,{staging: 'RosteredIn',           raw: 'SchedStart',                type: 'datetime64[ns]', tests: ['date'],                plugin: {}}
            ,{staging: 'RosteredOut',          raw: 'SchedEnd',                  type: 'datetime64[ns]', tests: ['date'],                plugin: {}}
            ,{staging: 'Break',                raw: 'Break',                      type: 'object',         tests: [],                      plugin: {}}
            ,{staging: 'Region',               raw: 'Site',                       type: 'object',         tests: [],                      plugin: {}}
            ,{staging: 'ShiftRole',            raw: 'Role',                       type: 'object',         tests: ['inscope'],             plugin: {}}
            ,{staging: 'ShiftClassification',  raw: 'EmployeeType',              type: 'object',         tests: ['inscope'],             plugin: {}}
            ,{staging: 'Source',               raw: 'source',                     type: 'object',         tests: [],                      plugin: {}}
            ]

sentinel:
  configuration: {ClientId: "sunflower"}
                
  EmployeeBaseFile: 
    {
    data: ['EmployeeCode', 'StartDate','EndDate','DateOfBirth', 'Source''string'],
    type: ['object','iso', 'iso', 'iso', 'object']
    }

  EmployeeClassifications: 
    {
    data: ['EmployeeCode', 'StartDate', 'EndDate', 'Classification'],
    type: ['object','iso', 'iso', 'object']
    }

  EmployeeEmploymentTypes:
    {
      data: ['EmployeeCode', 'StartDate', 'EndDate', 'EmploymentType'], # Employment type: Casual,FullTime,PartTime
      type: ['object','iso', 'iso', 'object']
    }

  Leave: #supports additional columns
    {
      data: ['EmployeeCode', 'Start', 'End', 'PayCode', 'Source'],  #paycode: PaidLeave, AnnualLeave
      type: ['object','iso', 'iso', 'object', object']
    }
                                        
  Payslips: #supports additional columns
    {
      data: ['EmployeeCode','PayslipCode','PayslipLineCode', 'PeriodStart','PeriodEnd', #paycode: Basepay / After6am / Holiday / OT250 etc
             'PayCode','Description', 'Hours', 'Amount','Classification', 'Source'], 
      type: ['object','object','object','iso', 'iso', 
             'object','object','float', float','object','object'],
      Classification: ['Ordinary','Overtime','Penalty','CasualLoading','Leave','Allowance']
    }
                                      
  Timesheets:  #supports additional columns
    {
      data: ['EmployeeCode','Award','ClockedIn', 'ClockedOut','RosteredIn', #paycode: Basepay / After6am / Holiday / OT250 etc
             'RosteredOut','UnpaidBreaks', 'Region', 'Source'], 
      type: ['object','object','iso','iso', 'iso', 
             'iso','object','object','object'],
      Region: ['National','Qld','Nsw','Act','Vic','Tas','Nt','Sa','Wa','Brisbane']
    }
  
docker:
  container:
    services:
      luigid:
        build:
          context: .
          dockerfile: Dockerfile
          args:
            - SSH_PRIVATE_KEY
        command: luigid 
        image: luigiui:1.0
        ports:
        - 8082:8082
        
      pipeline:
          image: luigiui:1.0
          depends_on:
            postgres:
              condition: service_healthy
          links:
            - postgres
            - luigid
          volumes:
            - ./app:/home/pipeline
            - ./project.yaml:/home/pipeline/project.yaml
          build:
            context: .
          command: bash -c "python -m luigi --module main ExtractTest --workers=2 --scheduler-host luigid"
      
      postgres:
          image: postgres:9-bullseye
          environment:
            - POSTGRES_DB=luigi
            - POSTGRES_USER=analyst
            - POSTGRES_PASSWORD=temp
          ports:
                - '6666:5432'
          healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
          volumes:
            - luigi-data:/var/lib/postgresql/data/ 

    volumes:
      luigi-data:
        name: luigi-data
    version: '3.7'
  
  image:
    - FROM python:3.9.7-slim as intermediate
    - RUN apt-get update
    - RUN apt-get install -y git
    - ARG SSH_PRIVATE_KEY
    - RUN mkdir /root/.ssh/
    - RUN echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa
    - RUN chmod 600 /root/.ssh/id_rsa
    - RUN touch /root/.ssh/known_hosts
    - RUN ssh-keyscan github.com >> /root/.ssh/known_hosts
    - ADD ./app/requirements.txt /
    - WORKDIR /pip-packages/
    - RUN pip download -r /requirements.txt

    - FROM python:3.9.7-slim
    - ENV PYTHONPATH=/home/pipeline:$PYTHONPATH
    - WORKDIR /pip-packages/
    - COPY --from=intermediate /pip-packages/ /pip-packages/
    - RUN pip install --no-index --find-links=/pip-packages/ /pip-packages/*
    - RUN mkdir -p /home/pipeline
    - ADD ./app /home/pipeline/
    - WORKDIR /home/pipeline